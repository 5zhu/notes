## Redis
   
#### 初始redis
redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库与很多键值对
数据库不同的是，Redis中的值可以是由string（字符串）、hash（哈希）、
list（列表）、set（集合）、zset（有序集合）、Bitmaps（位图）、
HyperLogLog、GEO（地理信息定位）等多种数据结构和算法组成。


- Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。
- Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。
- Redis支持数据的备份，即master-slave模式的数据备份。

#### Redis的应用场景    
- 缓存，提升性能的常用方式
- 排行榜系统，Redis提供了列表和有序集合数据结构
- 计数器应用
- 消息队列系统，Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。
 
#### 安装Redis

	# mac
        > brew install redis
    # ubuntu
        > apt-get install redis
    # redhat
        > yum install redis
    # 运行客户端
        > redis-cli

#### Redis数据类型

Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。

###### String（字符串）
string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。字符串类型的值实际可以
是字符串（简单的字符串、复杂的字符串（例如JSON、XML））、数字（整数、浮点数），甚至是二进制（图片、音频、视频），但是值最大不能
超过512MB。

     redis 127.0.0.1:6379> SET name godfery
     OK
     redis 127.0.0.1:6379> GET name
     "godfery"

###### Hash（哈希）
Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。

     redis> HMSET myhash name godfery age 26
     "OK"
     redis> HGET myhash name
     "godfery"
     
###### List（列表）
Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。

     redis 127.0.0.1:6379> lpush mylist java
     (integer) 1
     redis 127.0.0.1:6379> lpush mylist python
     (integer) 2
     redis 127.0.0.1:6379> lpush mylist ruby
     (integer) 3
     
     redis 127.0.0.1:6379> lrange mylist 0 10
        1) "ruby"
        2) "python"
        3) "java"

###### Set（集合）
Redis的Set是string类型的无序集合。
sadd 命令添加一个 string 元素到 key 对应的 set 集合中，成功返回1，如果元素已经在集合中返回 0，如果 key 对应的 set 不存在则返回错误。

      redis 127.0.0.1:6379> sadd myset redis
     (integer) 1
     redis 127.0.0.1:6379> sadd myset java
     (integer) 1
     redis 127.0.0.1:6379> sadd myset java
     (integer) 0
     
###### zset(sorted set：有序集合)
Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。
不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。  

     zadd key score member 
     
     
#### 持久化

##### RDB
RDB持久化是把当前进程数据生成快照保存到硬盘的过程，触发RDB持
久化过程分为手动触发和自动触发。

###### 手动触发
-save命令： 阻塞当前Redis服务器，直到RDB过程完成为止，对于内存
比较大的实例会造成长时间阻塞，线上环境不建议使用。

        redis 127.0.0.1:6379> SAVE
        OK
执行save会在 redis 安装目录中创建dump.rdb文件。

- bgsave命令： Redis进程执行fork操作创建子进程，RDB持久化过程由子
进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短。

bgsave的运行流程

![redis1.png](https://i.loli.net/2019/09/04/WFqxG7Q5I4REiNp.png)

- 1.执行bgsave命令，Redis父进程判断当前是否存在正在执行的子进
程，如RDB/AOF子进程，如果存在bgsave命令直接返回
- 2）父进程执行fork操作创建子进程，fork操作过程中父进程会阻塞，通
过info stats命令查看latest_fork_usec选项，可以获取最近一个fork操作的耗
时，单位为微秒。
- 3）父进程fork完成后，bgsave命令返回“Background saving started”信息
并不再阻塞父进程，可以继续响应其他命令。
- 4）子进程创建RDB文件，根据父进程内存生成临时快照文件，完成后
对原有文件进行原子替换。执行lastsave命令可以获取最后一次生成RDB的
时间，对应info统计的rdb_last_save_time选项。
- 5）进程发送信号给父进程表示完成，父进程更新统计信息，具体见
info Persistence下的rdb_*相关选项。



###### 自动触发RDB的持久化机制
Redis内部还存在自动触发RDB的持久化机制，以下场景会自动触发RDB

* 使用save相关配置，如“save m n”。表示m秒内数据集存在n次修改
时，自动触发bgsave。
* 如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发送给从节点
* 执行debug reload命令重新加载Redis时，也会自动触发save操作
* 默认情况下执行shutdown命令时，如果没有开启AOF持久化功能则
自动执行bgsave

##### AOF
以独立日志的方式记录每次写命令，
重启时再重新执行AOF文件中的命令达到恢复数据的目的。AOF解决了Redis数据持久化的实时性问题，是目前主流的持久化方式。
###### AOF的流程
AOF的工作流程操作：命令写入
（append）、文件同步（sync）、文件重写（rewrite）、重启加载
（load）
![redis2.png](https://i.loli.net/2019/09/05/UbHkgNEIzf68jLK.png)
- 1）所有的写入命令会追加到aof_buf（缓冲区）中。
- 2）AOF缓冲区根据对应的策略向硬盘做同步操作。
- 3）随着AOF文件越来越大，需要定期对AOF文件进行重写，达到压缩
的目的。
- 4）当Redis服务器重启时，可以加载AOF文件进行数据恢复。


  
